openapi: 3.0.3
info:
  title: Trailium API
  version: 1.0.0
  description: Demo API for Trailium (local dev).
paths:
  /api/albums/:
    get:
      operationId: albums_list
      description: List all albums for the authenticated user
      tags:
      - albums
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
          description: ''
    post:
      operationId: albums_create
      description: Create a new album
      tags:
      - albums
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AlbumCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AlbumCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumCreate'
          description: ''
  /api/albums/{id}/:
    get:
      operationId: albums_retrieve
      description: Retrieve a specific album
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - albums
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
          description: ''
    put:
      operationId: albums_update
      description: Update an album (owner only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - albums
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AlbumCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AlbumCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumCreate'
          description: ''
    patch:
      operationId: albums_partial_update
      description: Partially update an album (owner only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - albums
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAlbumCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAlbumCreate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlbumCreate'
          description: ''
    delete:
      operationId: albums_destroy
      description: Delete an album (owner only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - albums
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/albums/{id}/comments/:
    get:
      operationId: albums_comments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this album.
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - albums
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
          description: ''
    post:
      operationId: albums_comments_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this album.
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - albums
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Album'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Album'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
          description: ''
  /api/albums/{id}/like/:
    post:
      operationId: albums_like_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this album.
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - albums
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Album'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Album'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
          description: ''
  /api/albums/{id}/photos/:
    get:
      operationId: albums_photos_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this album.
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - albums
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
          description: ''
    post:
      operationId: albums_photos_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this album.
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - albums
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Album'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Album'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
          description: ''
  /api/albums/{id}/unlike/:
    delete:
      operationId: albums_unlike_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this album.
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - albums
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/change-password/:
    post:
      operationId: auth_change_password_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/clear-cookies/:
    post:
      operationId: auth_clear_cookies_create
      description: Clear JWT token cookies
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/auth/login/:
    post:
      operationId: auth_login_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPair'
          description: ''
        '401':
          description: No response body
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenPair'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '205':
          description: No response body
  /api/auth/refresh/:
    post:
      operationId: auth_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/register/:
    post:
      operationId: auth_register_create
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /api/auth/set-cookies/:
    post:
      operationId: auth_set_cookies_create
      description: Set httpOnly cookies for JWT tokens
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenPair'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /api/feed/posts:
    get:
      operationId: feed_posts_list
      tags:
      - feed
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
          description: ''
  /api/follows/:
    get:
      operationId: follows_list
      description: List follow requests for the authenticated user
      tags:
      - follows
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Follow'
          description: ''
    post:
      operationId: follows_create
      description: Create a follow request
      tags:
      - follows
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Follow'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Follow'
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /api/follows/{id}/:
    get:
      operationId: follows_retrieve
      description: Retrieve a specific follow relationship
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this follow.
        required: true
      tags:
      - follows
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
    put:
      operationId: follows_update
      description: Update a follow relationship
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this follow.
        required: true
      tags:
      - follows
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Follow'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Follow'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
    patch:
      operationId: follows_partial_update
      description: Partially update a follow relationship
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this follow.
        required: true
      tags:
      - follows
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFollow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFollow'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFollow'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
    delete:
      operationId: follows_destroy
      description: Delete a follow relationship
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this follow.
        required: true
      tags:
      - follows
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/follows/{id}/approve/:
    post:
      operationId: follows_approve_create
      description: Approve a follow request
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this follow.
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - follows
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Follow'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Follow'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /api/follows/{id}/reject/:
    post:
      operationId: follows_reject_create
      description: Reject a follow request
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this follow.
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - follows
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Follow'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Follow'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /api/follows/followers/:
    get:
      operationId: follows_followers_retrieve
      tags:
      - follows
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /api/follows/following/:
    get:
      operationId: follows_following_retrieve
      tags:
      - follows
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /api/follows/pending/:
    get:
      operationId: follows_pending_retrieve
      description: Get pending follow requests for the current user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - follows
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /api/follows/users/{user_id}/accept/:
    post:
      operationId: follows_users_accept_create
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - follows
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Follow'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Follow'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /api/follows/users/{user_id}/follow/:
    post:
      operationId: follows_users_follow_create
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - follows
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Follow'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Follow'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /api/follows/users/{user_id}/status/:
    get:
      operationId: follows_users_status_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - follows
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /api/follows/users/{user_id}/unfollow/:
    post:
      operationId: follows_users_unfollow_create
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - follows
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follow'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Follow'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Follow'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
          description: ''
  /api/posts/:
    get:
      operationId: posts_list
      description: List all visible posts for the authenticated user
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
          description: ''
    post:
      operationId: posts_create
      description: Create a new post
      tags:
      - posts
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCreate'
          description: ''
  /api/posts/{id}/:
    get:
      operationId: posts_retrieve
      description: Retrieve a specific post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    put:
      operationId: posts_update
      description: Update a post (owner only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostCreate'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCreate'
          description: ''
    patch:
      operationId: posts_partial_update
      description: Partially update a post (owner only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostCreate'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostCreate'
          description: ''
    delete:
      operationId: posts_destroy
      description: Delete a post (owner only)
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/posts/{id}/comments/:
    get:
      operationId: posts_comments_list
      description: Get or create comments for a post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''
        '201':
          description: No response body
    post:
      operationId: posts_comments_create
      description: Get or create comments for a post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''
        '201':
          description: No response body
  /api/posts/{id}/like/:
    post:
      operationId: posts_like_create
      description: Like a post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - posts
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
          description: ''
  /api/posts/{id}/unlike/:
    delete:
      operationId: posts_unlike_destroy
      description: Unlike a post
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      - in: path
        name: pk
        schema:
          type: integer
        required: true
      tags:
      - posts
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/todos/items/:
    get:
      operationId: todos_items_list
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoItem'
          description: ''
    post:
      operationId: todos_items_create
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TodoItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TodoItem'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
          description: ''
  /api/todos/items/{id}/:
    get:
      operationId: todos_items_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo item.
        required: true
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
          description: ''
    put:
      operationId: todos_items_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo item.
        required: true
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TodoItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TodoItem'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
          description: ''
    patch:
      operationId: todos_items_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo item.
        required: true
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTodoItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTodoItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTodoItem'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
          description: ''
    delete:
      operationId: todos_items_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo item.
        required: true
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/todos/items/{id}/toggle-done/:
    post:
      operationId: todos_items_toggle_done_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo item.
        required: true
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TodoItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TodoItem'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoItem'
          description: ''
  /api/todos/lists/:
    get:
      operationId: todos_lists_list
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoList'
          description: ''
    post:
      operationId: todos_lists_create
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TodoList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TodoList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
          description: ''
  /api/todos/lists/{id}/:
    get:
      operationId: todos_lists_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo list.
        required: true
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
          description: ''
    put:
      operationId: todos_lists_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo list.
        required: true
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TodoList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TodoList'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
          description: ''
    patch:
      operationId: todos_lists_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo list.
        required: true
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTodoList'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTodoList'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTodoList'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoList'
          description: ''
    delete:
      operationId: todos_lists_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo list.
        required: true
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/todos/priorities/:
    get:
      operationId: todos_priorities_list
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoPriority'
          description: ''
  /api/todos/priorities/{id}/:
    get:
      operationId: todos_priorities_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo priority.
        required: true
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoPriority'
          description: ''
  /api/todos/subitems/:
    get:
      operationId: todos_subitems_list
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoSubItem'
          description: ''
    post:
      operationId: todos_subitems_create
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoSubItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TodoSubItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TodoSubItem'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoSubItem'
          description: ''
  /api/todos/subitems/{id}/:
    get:
      operationId: todos_subitems_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo sub item.
        required: true
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoSubItem'
          description: ''
    put:
      operationId: todos_subitems_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo sub item.
        required: true
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoSubItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TodoSubItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TodoSubItem'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoSubItem'
          description: ''
    patch:
      operationId: todos_subitems_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo sub item.
        required: true
      tags:
      - todos
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTodoSubItem'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTodoSubItem'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTodoSubItem'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoSubItem'
          description: ''
    delete:
      operationId: todos_subitems_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this todo sub item.
        required: true
      tags:
      - todos
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: users_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - users
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: users_create
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{id}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this User.
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/{user_id}/content:
    get:
      operationId: users_content_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserContentResponse'
          description: ''
  /api/users/me/:
    get:
      operationId: users_me_retrieve
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_me_partial_update
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_me_destroy
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Album:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        is_published:
          type: boolean
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        photos:
          type: array
          items:
            $ref: '#/components/schemas/Photo'
          readOnly: true
        likes_count:
          type: integer
          readOnly: true
        comments_count:
          type: integer
          readOnly: true
      required:
      - comments_count
      - created_at
      - id
      - likes_count
      - photos
      - title
    AlbumCreate:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        is_published:
          type: boolean
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
      required:
      - title
    Author:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
      required:
      - id
      - username
    BlankEnum:
      enum:
      - ''
    Comment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          $ref: '#/components/schemas/Author'
        body:
          type: string
          minLength: 1
          maxLength: 1000
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - body
      - created_at
      - id
      - user
    Follow:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        follower:
          allOf:
          - $ref: '#/components/schemas/Author'
          readOnly: true
        followed:
          allOf:
          - $ref: '#/components/schemas/Author'
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - followed
      - follower
      - id
    GenderEnum:
      enum:
      - male
      - female
      - other
      - prefer_not_to_say
      type: string
      description: |-
        * `male` - Male
        * `female` - Female
        * `other` - Other
        * `prefer_not_to_say` - Prefer not to say
    KindEnum:
      enum:
      - personal
      - work
      - other
      type: string
      description: |-
        * `personal` - Personal
        * `work` - Work
        * `other` - Other
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        rememberMe:
          type: boolean
      required:
      - password
      - username
    Message:
      type: object
      properties:
        message:
          type: string
      required:
      - message
    PasswordChange:
      type: object
      properties:
        old_password:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - old_password
    PatchedAlbumCreate:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        is_published:
          type: boolean
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
    PatchedFollow:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        follower:
          allOf:
          - $ref: '#/components/schemas/Author'
          readOnly: true
        followed:
          allOf:
          - $ref: '#/components/schemas/Author'
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedPostCreate:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
          minLength: 5
        body:
          type: string
          maxLength: 5000
        image:
          type: string
          format: uri
          nullable: true
        is_published:
          type: boolean
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
    PatchedTodoItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        list:
          type: integer
        title:
          type: string
          maxLength: 200
        description:
          type: string
        is_done:
          type: boolean
        due_date:
          type: string
          format: date
          nullable: true
        priority:
          allOf:
          - $ref: '#/components/schemas/TodoPriority'
          readOnly: true
        priority_id:
          type: integer
          writeOnly: true
        progress_cached:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        subitems:
          type: array
          items:
            $ref: '#/components/schemas/TodoSubItem'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedTodoList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        name:
          type: string
          maxLength: 200
        description:
          type: string
        kind:
          $ref: '#/components/schemas/KindEnum'
        progress_cached:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/TodoItem'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedTodoSubItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        parent:
          type: integer
        title:
          type: string
          maxLength: 200
        description:
          type: string
        is_done:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        avatar:
          type: string
          format: uri
          description: Profile picture URL
          maxLength: 500
        full_name:
          type: string
          description: User's full name
          maxLength: 255
          minLength: 2
        gender:
          description: |-
            User's gender identity

            * `male` - Male
            * `female` - Female
            * `other` - Other
            * `prefer_not_to_say` - Prefer not to say
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
          description: Phone number with country code
          pattern: ^\+?1?\d{9,15}$
          maxLength: 17
        address:
          type: string
          description: User's address (max 1000 characters)
          maxLength: 1000
        about:
          type: string
          description: User's bio or description (max 2000 characters)
          maxLength: 2000
        is_premium:
          type: boolean
          description: Whether user has premium subscription
        is_private:
          type: boolean
          description: Whether user's profile is private
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
    Photo:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
        url:
          type: string
          format: uri
          maxLength: 200
        thumbnail_url:
          type: string
          format: uri
          maxLength: 200
        file_url:
          type: string
          format: uri
          nullable: true
          readOnly: true
        thumbnail_url_file:
          type: string
          format: uri
          nullable: true
          readOnly: true
        metadata: {}
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - file_url
      - id
      - thumbnail_url_file
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 200
          minLength: 5
        body:
          type: string
          maxLength: 5000
        author:
          $ref: '#/components/schemas/Author'
        image_url:
          type: string
          format: uri
          nullable: true
          readOnly: true
        is_published:
          type: boolean
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
        likes_count:
          type: integer
          readOnly: true
        comments_count:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - author
      - comments_count
      - created_at
      - id
      - image_url
      - likes_count
      - title
    PostCreate:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
          minLength: 5
        body:
          type: string
          maxLength: 5000
        image:
          type: string
          format: uri
          nullable: true
        is_published:
          type: boolean
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
      required:
      - title
    Register:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        password:
          type: string
          writeOnly: true
      required:
      - password
      - username
    StatusEnum:
      enum:
      - pending
      - accepted
      - rejected
      type: string
      description: |-
        * `pending` - pending
        * `accepted` - accepted
        * `rejected` - rejected
    TodoItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        list:
          type: integer
        title:
          type: string
          maxLength: 200
        description:
          type: string
        is_done:
          type: boolean
        due_date:
          type: string
          format: date
          nullable: true
        priority:
          allOf:
          - $ref: '#/components/schemas/TodoPriority'
          readOnly: true
        priority_id:
          type: integer
          writeOnly: true
        progress_cached:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        subitems:
          type: array
          items:
            $ref: '#/components/schemas/TodoSubItem'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - list
      - priority
      - subitems
      - title
      - updated_at
    TodoList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
        name:
          type: string
          maxLength: 200
        description:
          type: string
        kind:
          $ref: '#/components/schemas/KindEnum'
        progress_cached:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/TodoItem'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - items
      - name
      - updated_at
      - user
    TodoPriority:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        key:
          type: string
          maxLength: 32
        name:
          type: string
          maxLength: 64
        color:
          type: string
          maxLength: 16
        sort_order:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        is_default:
          type: boolean
      required:
      - id
      - key
      - name
    TodoSubItem:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        parent:
          type: integer
        title:
          type: string
          maxLength: 200
        description:
          type: string
        is_done:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - parent
      - title
      - updated_at
    TokenPair:
      type: object
      properties:
        access:
          type: string
        refresh:
          type: string
      required:
      - access
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        avatar:
          type: string
          format: uri
          description: Profile picture URL
          maxLength: 500
        full_name:
          type: string
          description: User's full name
          maxLength: 255
          minLength: 2
        gender:
          description: |-
            User's gender identity

            * `male` - Male
            * `female` - Female
            * `other` - Other
            * `prefer_not_to_say` - Prefer not to say
          oneOf:
          - $ref: '#/components/schemas/GenderEnum'
          - $ref: '#/components/schemas/BlankEnum'
        phone:
          type: string
          description: Phone number with country code
          pattern: ^\+?1?\d{9,15}$
          maxLength: 17
        address:
          type: string
          description: User's address (max 1000 characters)
          maxLength: 1000
        about:
          type: string
          description: User's bio or description (max 2000 characters)
          maxLength: 2000
        is_premium:
          type: boolean
          description: Whether user has premium subscription
        is_private:
          type: boolean
          description: Whether user's profile is private
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
      required:
      - id
      - username
    UserContentResponse:
      type: object
      properties:
        private:
          type: boolean
        message:
          type: string
        posts:
          type: array
          items:
            $ref: '#/components/schemas/Post'
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
      required:
      - private
    VisibilityEnum:
      enum:
      - public
      - followers
      - private
      type: string
      description: |-
        * `public` - Public
        * `followers` - Followers only
        * `private` - Private
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

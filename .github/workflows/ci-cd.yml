name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DJANGO_SETTINGS_MODULE: core.settings

jobs:
  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        uses: python-security/bandit-action@v1.0.0
        with:
          args: -r apps/backend -f json -o bandit-report.json

      - name: Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-results.sarif

  # Backend testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd apps/backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-django factory-boy

      - name: Run tests
        run: |
          cd apps/backend
          pytest --cov=. --cov-report=xml --cov-report=html --cov-fail-under=80
        env:
          DEBUG: True
          SECRET_KEY: test-secret-key
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          CORS_ALLOW_ALL_ORIGINS: True

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: apps/backend/htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd apps/frontend
          npm ci

      - name: Run linting
        run: |
          cd apps/frontend
          npm run lint

      - name: Run tests
        run: |
          cd apps/frontend
          npm run test:coverage
        env:
          CI: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: apps/frontend/coverage/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Code quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          cd apps/backend
          pip install black isort flake8 mypy

      - name: Check Python code formatting
        run: |
          cd apps/backend
          black --check --diff .
          isort --check-only --diff .

      - name: Run Python linting
        run: |
          cd apps/frontend
          npm ci
          npm run lint

      - name: Run type checking
        run: |
          cd apps/backend
          mypy --ignore-missing-imports .

  # Docker build and test
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test backend
        run: |
          cd apps/backend
          docker build -t trailium-backend:test .
          docker run --rm trailium-backend:test python manage.py check --deploy

      - name: Build and test frontend
        run: |
          cd apps/frontend
          docker build -t trailium-frontend:test .
          docker run --rm trailium-frontend:test npm run build

  # Integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-test]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-node@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd apps/backend
          pip install -r requirements.txt
          pip install pytest-django factory-boy

      - name: Run integration tests
        run: |
          cd apps/backend
          pytest tests/integration/ --cov=. --cov-report=xml
        env:
          DEBUG: True
          SECRET_KEY: test-secret-key
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          CORS_ALLOW_ALL_ORIGINS: True

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your staging deployment logic here
          # Example: kubectl apply -f k8s/staging/
          # or: docker-compose -f docker-compose.staging.yml up -d

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add your production deployment logic here
          # Example: kubectl apply -f k8s/production/
          # or: ./scripts/deploy_production.sh

  # Performance testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install locust

      - name: Run performance tests
        run: |
          cd tests/performance
          locust --host=http://localhost:8000 --users=100 --spawn-rate=10 --run-time=5m --headless
